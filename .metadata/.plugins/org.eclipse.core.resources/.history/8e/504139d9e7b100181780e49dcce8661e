/*
 * Auteurs : Christian Mongeon et David Ringuet
 * 
 * Fichier : MainTp4.java
 * 
 * Date de remise : 23 novembre 2017
 */

import java.io.*;
import java.text.*;

public class MainTp4 {

	public static void main( String[] args ) throws IOException {
		
		final String MENU = "\nJEUX DISPONIBLES\n\n" +		
							"1. Calcul mental\n" +
							"2. Jouer aux dés\n" +
							"3. Deviner un nombre\n" +
							"4. Quitter le programme\n";

		final char CALCUL = '1', DES = '2', DEVINER = '3', QUITTER = '4';

		char choix;

		System.out.println( "Bienvenue au programme de jeux du TP4." );

		do {
			choix = lireCaractere(MENU + "\nEntrez votre choix : ");
			
			switch (choix){
			case CALCUL :
				calculMental();
				break;
			case DES :
				jouerAuxDes();
				break;
			case DEVINER :
				devinerUnNombre();
				break;
			case QUITTER :
				break;
			default :
				System.out.println("\nChoix invalide : " + choix );
			}
		} while (choix != QUITTER);
		
		System.out.println("\nFin du programme.");
	}
	
	// 
	
	private static void calculMental() throws IOException {	
		
		final int NB_MIN = 1;
		final int NB_MAX = 12;
		
		final char OUI = 'O';
		
		int nbCalculs =  1, nbBon = 0, nbMal = 0, nb1, nb2, reponse, repCorrige;
		char operateur ; 
		
		System.out.println( "\nBienvenue au jeu \"Calcul mental\".");
		
		do {
			
			System.out.println("\nCalcul #" + nbCalculs);
			operateur = lireOperateur("\nEntrez un opérateur arithmétique " +
					 "(+, -, *, /) : ");
			
			repCorrige = calculerResultat(nb1 = genererNbHasard(NB_MIN, NB_MAX),
							nb2 = genererNbHasard(NB_MIN, NB_MAX), operateur);
			
			System.out.println( "\n" + nb1 + " " + operateur + " " + nb2 + 
																	" = ? ");
			reponse =lireEntier("\nQuelle est votre réponse (doit être un " +
					 "entier) : ");
			if (reponse == repCorrige) {
				System.out.println("\nBravo ! Vous avez trouvé la bonne " +
						 "réponse."); 
				nbBon ++;
			}else {
				System.out.println("Désolé, la bonne réponse était " + 
																	repCorrige);
				nbMal ++;
			}			
			nbCalculs ++;
			
		}while ((lireOuiNon("\nVoulez-vous faire un autre calcul mental (O/N)" +
				 " ? ")) == OUI );
		
	if(nbBon == nbCalculs){
		System.out.println("\nFélicitations ! Vous avez répondu correctement " +
				"à tous les calculs.");
	} else if (nbMal == nbCalculs){
		System.out.println("\nDésolé, vous n'avez eu aucune bonne réponse.");	
	} else {
		System.out.println("\nVous avez eu " + nbBon + " bonne(s) réponse(s) " +
															"sur " + nbCalculs);
		System.out.println("\nVous avez eu " + nbMal + " mauvaise(s) "
											+ "réponse(s) sur " + nbCalculs);
	}	
		System.out.println( "\nMerci d'avoir joué au jeu" +
							" \"Calcul mental\"." );
	}
	
	// TODO Écrire le commentaire de la méthode.
	
	private static char lireOperateur( String question ) throws IOException {
		char opperateur;
		boolean valide;

		do {
			valide = true;
			opperateur = lireCaractere( question );

			if ( opperateur != '+' && opperateur != '-' && opperateur != 
													'*' && opperateur !=  '/') {
				System.out.println( "\nErreur, répondez seulement par +, -," + 
						 " * ou /." );
				valide = false;
			}
		} while ( !valide );
		return opperateur;
	}
	
	// TODO Écrire le commentaire de la méthode.
	
	private static int calculerResultat( int nb1, int nb2, char operateur ) {		
			
			int reponse;
			switch (operateur) {
			case '+':
				reponse = nb1 + nb2;
				break;
			case '-':
				reponse = nb1 - nb2;
				break;
			case '*':
				reponse = nb1 * nb2;
				break;
			case '/':
				reponse = nb1 / nb2;
				break;
			default:
				reponse = 0;
		}
		return reponse;
	}
	
	// TODO Écrire le commentaire de la méthode.
	
	private static void jouerAuxDes() throws IOException {	
		
		final int NB_MIN_LANCERS = 1;
		final int NB_MAX_LANCERS = 20;
		
		final int NB_MIN_DES = 1;
		final int NB_MAX_DES = 8;
		int nbLancerGlobal, nbLancerItteratif, global, itteration,
			deItteration, totalDes = 0;
		double moyenneDes;
		System.out.println( "\nBienvenue au jeu \"Jouer aux dés\".\n");
		
		nbLancerGlobal = lireEntierValide("\nCombien de fois voulez-vous " + 
				"lancer les dés (entre " + NB_MIN_LANCERS  + " et " + 
				NB_MAX_LANCERS + ") : ", NB_MIN_LANCERS, NB_MAX_LANCERS);
		
		nbLancerItteratif = lireEntierValide("\nCombien de dés voulez-vous " +
					"lancer à chaque fois (entre " + NB_MIN_DES + " et " + 
					NB_MAX_DES + ") : " , NB_MIN_DES, NB_MAX_DES);
		
		for(global = 1; global <= nbLancerGlobal; global ++){
			System.out.println("\nLancer #" + global );
			for(itteration = 1; itteration <= nbLancerItteratif; itteration ++){
				
				System.out.println("\t Valeur du dé #" + itteration + " : " + 
										(deItteration = genererNbHasard(1,6))); 
				totalDes += deItteration;
		
			};
		
		};
		
		moyenneDes = totalDes / ( nbLancerGlobal * nbLancerItteratif );
		
		System.out.println("\nGrand total des valeurs de tous les dés : " + 
							totalDes);
		System.out.println("\nMoyenne des valeurs par lancer : " + 
							formaterNb (moyenneDes, 2));	
		System.out.println( "\nMerci d'avoir joué au jeu " +
							"\"Jouer aux dés\"." );
	}

	/*
	 * La méthode devinerUnNombre() permet de jouer au jeux Deviner un nombre
	 * Le jeu consiste a deviner un nombre généré aléatoirement entre 1 et 50
	 * 
	 */
	
	private static void devinerUnNombre() throws IOException {
		
		final int NB_MIN = 1;
		final int NB_MAX = 50;
		
		final char OUI = 'O';
		
		boolean repTrouve = false;
		
		int nbEssais = 1, essai, reponse = genererNbHasard(NB_MIN, NB_MAX);
		
		char continuer;
		
		System.out.println( "\nBienvenue au jeu \"Deviner un nombre\".");
		System.out.println( "\nIl s'agit de deviner un nombre entre " +
				            NB_MIN + " et " + NB_MAX + "." );
		
		continuer = lireOuiNon("\nÊtes-vous prêt à commencer (O/N) ? ");
			while(continuer == OUI) {
				System.out.println("\nEssai #" + nbEssais);
				essai = lireEntierValide("\nEntrez un nombre entre 1 et 50 : ",
											NB_MIN, NB_MAX);
				if(essai < reponse) {
					System.out.println("\nLe nombre à deviner est supérieur" +
										" à " + essai);
				} else if(essai > reponse){
					System.out.println("\nLe nombre à deviner est inférieur " +
										"à " + essai);
				} else {
					repTrouve = true;
					break;
				}
				nbEssais ++;
				continuer = lireOuiNon("\nVoulez-vous continuer à deviner" +
										" le nombre (O/N) ? ");
			}
		
			if (repTrouve) {
				System.out.println("\nBravo ! Vous avez deviné le nombre " + 
									reponse + " en " + nbEssais + " essai(s).");
			} else {
				System.out.println("\nLe nombre à deviner était " + reponse);
			}
				
		System.out.println( "\nMerci d'avoir joué au jeu" +
							" \"Deviner un nombre\"." );
	}
	
	/*
	 * La méthode lireCaractere() permet de lire un et un seul caractère
	 * sans aucune validation.
	 *
 	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : le caractère lu.
	 */
	
	private static char lireCaractere( String question ) throws IOException {		
		String chaine;
		boolean valide;
		int lgChaine;

		do {
			valide = true;
			chaine = lireChaine( question );
			lgChaine = chaine.length();

			// Erreur si le nombre de caractères de la chaîne lue
			// n'est pas exactement 1.
			
			if ( lgChaine != 1 ) {
				System.out.println( "\nErreur, entrez un seul caractère." );
				valide = false;
			}
		} while ( !valide );

		// Retourne le premier caractère de la chaîne lue.
		
		return chaine.charAt( 0 );
	}

	/*
	 * La méthode lireChaine() permet de lire une chaîne en s'assurant
	 * qu'elle n'est pas vide.
	 *
	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : la chaîne de caractères lue.
	 */
	
	private static String lireChaine( String question ) throws IOException {		
		BufferedReader clavier =
			new BufferedReader( new InputStreamReader( System.in ) );
		
		String chaine;
		boolean valide;
		int lgChaine;
		
		do {
			valide = true;
			System.out.print( question );
	
			chaine = clavier.readLine();
			lgChaine = chaine.length();

			// Erreur si la chaîne lue est vide.

			if ( lgChaine == 0 ) {
				System.out.println( "\nErreur, l'entrée ne doit pas" +
									" être vide." );
				valide = false;
			}
		} while ( !valide );
				
		return chaine;
	}

	/*
	 * La méthode genererNbHasard() permet de générer un nombre entier
	 * aléatoire entre une borne inférieure et une borne supérieure.
	 * Ne fonctionne qu'avec des entiers plus grand ou égal à 0.
	 * 
	 * Paramètres : la borne inférieure et la borne supérieure. Aucune
	 *              validation, la borne inférieure doit être plus
	 *              petite ou égale à la borne supérieure.
	 * 
	 * Retourne : un entier au hasard entre les deux bornes.
	 */

	private static int genererNbHasard( int min, int max ) {
	    return (int) ( ( Math.random() * ( max - min + 1 ) ) + min );
	}

	/*
	 * La méthode lireOuiNon() permet d'afficher une question et de
	 * lire la réponse O ou N de l'utilisateur.
	 * 
	 * Paramètre: la question à afficher.
	 * 
	 * Retourne : le caractère O ou N en majuscule.
	 */

	private static char lireOuiNon( String question ) throws IOException {
		char rep;
		boolean valide;

		do {
			valide = true;

			// Convertir le caractère lu en majuscule.
			
			rep = Character.toUpperCase( lireCaractere( question ) );

			// Erreur si le caractère lu n'est pas O ou N.
			
			if ( rep != 'O' && rep != 'N' ) {
				System.out.println( "\nErreur, répondez par O ou N " +
						            "seulement." );
				valide = false;
			}
		} while ( !valide );

		return rep;
	}
	
	/*
	 * La méthode lireEntierValide() permet d'afficher une question et de lire
	 * un nombre entier qui fait partie d'un intervalle.
	 * 
	 * Paramètres : la question à afficher à l'utilisateur, le nombre minimum
	 *              et le nombre maximum.
	 * 
	 * Retourne : le nombre entier lu.
	 */
	
	private static int lireEntierValide( String question, int min, int max )
			throws IOException {

		boolean valide;
		int nombreLu;

		do {
			valide = true;

			nombreLu = lireEntier( question );

			// Erreur si le nombre lu n'est pas entre min et max.
		
			if ( nombreLu < min || nombreLu > max ) {
				System.out.println( "\nErreur, entrez un nombre entier " +
									"entre " + min + " et " + max );
				valide = false;
			}
		} while ( !valide );

		return nombreLu;
	}
	
	/*
	 * La méthode lireEntier() permet de lire un entier sans aucune validation.
	 * 
	 * Paramètre : la question à afficher à l'utilisateur.
	 * 
	 * Retourne : le nombre entier lu.
	 */
	
	private static int lireEntier( String question ) throws IOException {
		BufferedReader clavier =
	        new BufferedReader( new InputStreamReader( System.in ) );
		
		System.out.print( question );
		
		return Integer.parseInt( clavier.readLine() );
	}
	
	/*
	 * La méthode formaterNb() permet de formater un nombre dans
	 * le format 9 999,99.
	 * 
	 * Paramètres : Le nombre à formater et le nombre de décimales
	 *              à mettre après la virgule.
	 * 
	 * Retourne : la chaîne de caractères contenant le nombre formaté.
	 */

	private static String formaterNb( double nb, int dec ) {
	    NumberFormat formatNb = NumberFormat.getNumberInstance();

	    formatNb.setMinimumIntegerDigits( 1 );
	    formatNb.setMinimumFractionDigits( dec );
	    formatNb.setMaximumFractionDigits( dec );

	    return formatNb.format( nb );
	}
}