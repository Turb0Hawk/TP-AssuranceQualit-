package shortcuts;

import java.io.*;
import java.text.*;

public class MethodesUtilitaires {

	public static void main( String[] args ) throws IOException {
		int entier;
		
		entier = lireEntier( "\nEntrez un nombre entier quelconque : " );
		
		System.out.println( "\nLe nombre entier lu est : " + entier );
		
		double nb;
		
		nb = lireReel( "\nEntrez un nombre réel quelconque : " );

		System.out.println( "\nLe nombre réel lu est : " + nb );
		
		String ville;
		
		ville = lireChaine( "\nEntrez le nom de la ville : " );
		
		System.out.println( "\nLe nom de la ville lu est : " + ville );

		char rep;
		
		rep = lireCaractere( "\nVoulez-vous continuer (o ou n) : " );
		
		System.out.println( "\nLa réponse lue est : " + rep );
		
		double nb1 = 24987.12546789, nb2 = 24987.13456789;
		int nb3 = 24987;
		
		System.out.println( "\nnb1 = " + formaterNb( nb1, 4 ) );
	
		System.out.println( "nb2 = " + formaterNb( nb2, 1 ) );

		System.out.println( "nb3 = " + formaterNb( nb3, 2 ) );

		double montant = 24987.12546789;
		
		System.out.println( "\nMontant = " + formaterMonetaire( montant, 2 ) );
		
		double pourcentage = 0.78532;
		
		System.out.println( "\nPourcentage = " + 
			formaterPourcentage( pourcentage, 0 ) );

		int nbHasard = genererNbHasard( 1, 49 );
		
		System.out.println( "\nLe nombre entre 1 et 49 généré au hasard " +
			"est : " + nbHasard );
		System.out.println( "\nVoici un autre nombre entre 1 et 49 généré " +
			"au hasard : " + genererNbHasard( 1, 49 ) );
	}
	
	/*
	 * La méthode lireEntier() permet de lire un entier sans aucune validation.
	 *
	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : le nombre entier lu.
	 */

	private static int lireEntier( String question ) throws IOException {
		BufferedReader clavier = 
			new BufferedReader( new InputStreamReader( System.in ) );

		System.out.print( question );

		return Integer.parseInt( clavier.readLine() );
	}

	/*
	 * La méthode lireReel() permet de lire un réel sans aucune validation.
	 *
	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : le nombre réel lu.
	 */

	private static double lireReel( String question ) throws IOException {
		BufferedReader clavier = 
			new BufferedReader( new InputStreamReader( System.in ) );

		System.out.print( question );

		return Double.parseDouble( clavier.readLine() );
	}
	
	/*
	 * La méthode lireChaine() permet de lire une chaîne sans aucune 
	 * validation.
	 *
	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : la chaîne de caractères lue.
	 */
	
	private static String lireChaine( String question ) throws IOException {
		BufferedReader clavier =
			new BufferedReader( new InputStreamReader( System.in ) );
		
		System.out.print( question );
		
		return clavier.readLine();
	}

	/*
	 * La méthode lireCaractere() permet de lire un caractère sans aucune
	 * validation.
	 *
	 * Paramètre : la question à afficher à l'utilisateur.
	 *
	 * Retourne : le caractère lu.
	 */
	
	private static char lireCaractere( String question ) throws IOException {
		BufferedReader clavier = 
			new BufferedReader( new InputStreamReader( System.in ) );
		
		System.out.print( question );
		
		return clavier.readLine().charAt( 0 );
	}
	
	/*
	 * La méthode formaterNb() permet de formater un nombre dans 
	 * le format 9999,99.
	 *
	 * Paramètres : Le nombre à formater et le nombre de décimales
	 *				à mettre après la virgule.
	 *
	 * Retourne : la chaîne de caractères contenant le nombre formaté.
	 */
	
	private static String formaterNb( double nb, int dec ) {
		NumberFormat formatNb = NumberFormat.getNumberInstance();
		
		formatNb.setMinimumIntegerDigits( 1 );
		formatNb.setMinimumFractionDigits( dec );
		formatNb.setMaximumFractionDigits( dec );
		
		return formatNb.format( nb );
	}
	
	/*
	 * La méthode formaterMonetaire() permet de formater un 
	 * nombre dans le format 9 999,99 $.
	 *
	 * Paramètres : le nombre à formater et le nombre de décimales
	 *				à mettre après la virgule.
	 *
	 * Retourne : la chaîne de caractères contenant le nombre formaté.
	 */
	
	private static String formaterMonetaire( double nb, int dec ) {
		NumberFormat formatNb = NumberFormat.getCurrencyInstance();
	
		formatNb.setMinimumIntegerDigits( 1 );
		formatNb.setMinimumFractionDigits( dec );
		formatNb.setMaximumFractionDigits( dec );
		
		return formatNb.format(nb);
	}
	
	/*
	 * La méthode formaterPourcentage() permet de formater un 
	 * nombre dans le format 9 999,99 %.
	 *
	 * Paramètres : le nombre à formater et le nombre de décimales
	 *				à mettre après la virgule.
	 *
	 * Retourne : la chaîne de caractères contenant le nombre formaté.
	 */
	
	private static String formaterPourcentage( double nb, int dec ) {
		NumberFormat formatNb = NumberFormat.getPercentInstance();
		
		formatNb.setMinimumIntegerDigits( 1 );
		formatNb.setMinimumFractionDigits( dec );
		formatNb.setMaximumFractionDigits( dec );
		
		return formatNb.format( nb );
	}

	/*
	 * La méthode genererNbHasard() permet de générer un nombre entier 
	 * aléatoire entre une borne inférieure et une borne supérieure. 
	 * Ne fonctionne qu'avec des entiers plus grand ou égal à 0.
	 *
	 * Paramètres : la borne inférieure et la borne supérieure. Aucune
	 *				validation, la borne inférieure doit être plus
	 *				petite ou égale à la borne supérieure.
	 *
	 * Retourne : un entier au hasard entre les deux bornes inclusivement.
	 */
	
	private static int genererNbHasard( int min, int max ) {
		return (int) ( ( Math.random() * ( max - min + 1 ) ) + min );
	}
}